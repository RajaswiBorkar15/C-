// Online C++ compiler to run C++ program online
#include <iostream>
#include <vector>
#include <stack>
using namespace std;
void dfs (vector<vector<int>>& adj,vector<int>& vis,stack<int>& st,int n,int node){
    vis[node] = 1;
    for(int j =1;j<=n;j++){
        if(adj[node][j] == 1 && vis[j] != 1){
            dfs(adj,vis,st,n,j);
        }
    }
    st.push(node);
}
int main() {
    // Write C++ code here
    int t;
    cin>>t;
    while(t--){
        int n , m;
        cin>>n>>m;
        // Use vector of vectors for adjacency matrix
        vector<vector<int>> adj(n + 1, vector<int>(n + 1, 0));

        // visted matrix n+1 as its 1 based nodes
        vector<int> vis(n+1,0);
        // adjancency matrix
        for(int i = 1;i<= n;i++){
            for(int j =1;j<=n;j++){
                if( i < j){
                    adj[i][j] = 1;
                }
            }
        }
        // adding the edges to be removed into vector
        vector<vector<int>> pair_todelete(m,vector<int>(2,0));
        for(int i = 0;i<m;i++){
            cin>>pair_todelete[i][0];
            cin>>pair_todelete[i][1];
        }
        // removing edges from graph matrix and reducing indegree of those to 1
        for(int i =0;i<m;i++){
            int u = pair_todelete[i][0];
            int v = pair_todelete[i][1];
            if(adj[u][v] == 1){
                adj[u][v] = 0;
            }
        }
        // dfs traversal
        stack<int> st;
        for(int i=1;i<=n;i++){
            if(vis[i] == 0){
                dfs(adj,vis,st,n,i);
            }
        }
        vector<int> ans;
        //traverse to stack till its empty
        while(!st.empty()){
            ans.push_back(st.top());
            st.pop();
        }
        for(int i =0;i<ans.size();i++){
            cout<<ans[i]<<" ";
        }
        cout<<endl;
    }
    
    return 0;
}

Input:
3
3 2
1 3
2 3
4 0
4 2
1 2
1 3

Output:
3 1 2 
1 2 3 4 
2 3 1 4 
